{"version":3,"sources":["utils/API.js","components/head.js","components/search.js","components/resultsdiv.js","components/foot.js","App.js","serviceWorker.js","index.js"],"names":["Promise","resolve","reject","axios","get","then","results","data","map","obj","image","picture","thumbnail","name","first","last","phone","email","dob","date","catch","err","Head","Search","props","className","placeholder","onChange","handleInputChange","ResultsDiv","scope","onClick","handleSortButton","class","employeeSearch","index","key","alt","src","employees","Foot","App","useState","setEmployees","setEmployeeSearch","ascending","setOrderBy","useEffect","API","console","log","event","persist","value","target","filter","includes","sort","a","b","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.b0825f61.chunk.js","sourcesContent":["import axios from  'axios';\r\n\r\nexport default {\r\n    getRandomUser: function () {\r\n        return new Promise((resolve, reject) => {\r\n            axios.get(\"https://randomuser.me/api/?results=200&nat=us\")\r\n            .then(({ data }) => {\r\n                const results = data.results.map( obj => {\r\n                    return {\r\n                        image: obj.picture.thumbnail,\r\n                        name: `${obj.name.first} ${obj.name.last}`,\r\n                        phone: obj.phone,\r\n                        email: obj.email,\r\n                        dob: obj.dob.date\r\n                    }\r\n                })\r\n                resolve(results);\r\n            })\r\n            .catch(err => reject(err));\r\n        })\r\n    }\r\n};\r\n  ","import React from 'react';\r\n\r\nexport default function Head() {\r\n\r\n\r\n    return (\r\n        <>\r\n            <h1>Employee Directory</h1>\r\n            <h6>Click on the carrots to filter by heading or use the search box to narrow your results</h6>\r\n        </>\r\n    );\r\n}","import React from 'react';\r\n\r\nexport default function Search(props) {\r\n\r\n    return (\r\n        <form>\r\n            <form className=\"search\">\r\n                <input placeholder=\"Search\" onChange={props.handleInputChange}></input>\r\n            </form>\r\n        </form>\r\n    );\r\n}\r\n","import React from \"react\";\r\n\r\nexport default function ResultsDiv(props) {\r\n\r\n    return (\r\n        <>\r\n            <table className=\"table table-striped\">\r\n                <thead>\r\n                    <tr>\r\n                        <th scope=\"col\">Image</th>\r\n                        <th scope=\"col\">Name<button onClick={props.handleSortButton}><i class=\"fa fa-fw fa-sort\"></i></button></th>\r\n                        <th scope=\"col\">Cell</th>\r\n                        <th scope=\"col\">email</th>\r\n                        <th scope=\"col\">DOB</th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    {(!props.handleInputChange) ? \r\n                        props.employees.map((obj, index) => \r\n                            <tr key={index}>\r\n                                <td><img alt=\"employeeRightHere\" src={obj.image}/></td>\r\n                                <td>{obj.name}</td>\r\n                                <td>{obj.phone}</td>\r\n                                <td>{obj.email}</td>\r\n                                <td>{obj.dob}</td>\r\n                            </tr>\r\n                        ) : \r\n                        props.employeeSearch.map((obj, index) => \r\n                            <tr key={index}>\r\n                                <td><img alt=\"employeeRightHere\" src={obj.image}/></td>\r\n                                <td>{obj.name}</td>\r\n                                <td>{obj.phone}</td>\r\n                                <td>{obj.email}</td>\r\n                                <td>{obj.dob}</td>\r\n                            </tr>\r\n                        )\r\n                    }\r\n                </tbody>\r\n            </table>\r\n        </>\r\n    );\r\n}\r\n","import React from 'react';\r\n\r\nexport default function Foot() {\r\n\r\n\r\n    return (\r\n        <>\r\n            <p>FOOT</p>\r\n        </>\r\n    );\r\n}","import React, { useState, useEffect } from \"react\";\nimport API from \"./utils/API\";\n\nimport Head from './components/head';\nimport Search from './components/search';\nimport ResultsDiv from './components/resultsdiv';\nimport Foot from './components/foot';\nimport './App.css';\n\nfunction App() {\n\n  const [employees, setEmployees] = useState([]);\n  const [employeeSearch, setEmployeeSearch] = useState([]);\n  const [ascending, setOrderBy] = useState(true);\n\n  useEffect(() => {\n      API.getRandomUser()\n          .then((results) => {\n            setEmployees(results);\n            setEmployeeSearch(results);\n          })\n          .catch(err => console.log(err));\n  }, []) \n\n  const handleInputChange = (event) => {\n    event.persist()\n    let value = event.target.value;\n    setEmployeeSearch(\n      employees.filter(obj => {\n        return (obj.name.includes(value)) ? true : false;\n      })\n    )\n  };\n\n  const handleSortButton = () => {\n    setOrderBy(!ascending);\n    if (ascending) employeeSearch.sort((a, b) => a.name > b.name ? 1 : -1);\n    if (!ascending) employeeSearch.sort((a, b) => a.name < b.name ? 1 : -1);\n  }\n\n  return (\n    <>\n      <Head />\n      <Search handleInputChange={handleInputChange}/>\n      <ResultsDiv \n        employees={employees} \n        employeeSearch={employeeSearch} \n        handleInputChange={handleInputChange}\n        handleSortButton={handleSortButton}\n      />\n      <Foot />\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}